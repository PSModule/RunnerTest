on: push

jobs:
  test:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Run a multi-line script
        shell: pwsh
        run: |
          Write-Verbose "$HOME" -Verbose

      - name: User Profile
        shell: pwsh
        run: |
          $userProfile = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)
          Write-Verbose $userProfile -Verbose

      - name: Test function
        shell: pwsh
        run: |
          function Get-ConfigPath {
              if ($IsWindows) {
                  # Windows - Use AppData\Roaming
                  return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData)
              }
              elseif ($IsLinux) {
                  # Linux - Follow the XDG Base Directory Specification if possible
                  $xdgConfigHome = [System.Environment]::GetEnvironmentVariable("XDG_CONFIG_HOME")
                  if (-not [string]::IsNullOrWhiteSpace($xdgConfigHome)) {
                      return $xdgConfigHome
                  } else {
                      return [System.IO.Path]::Combine([System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile), ".config")
                  }
              }
              elseif ($IsMacOS) {
                  # macOS - Use ~/Library/Preferences
                  return [System.IO.Path]::Combine([System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile), "Library", "Preferences")
              }
              else {
                  throw "Unsupported operating system."
              }
          }

          Write-Verbose (Get-ConfigPath) -Verbose

